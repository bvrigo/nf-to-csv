{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["data","a","pdfjsLib","getDocument","promise","doc","pageTexts","Array","from","length","numPages","v","i","getPage","getTextContent","items","map","token","str","join","Promise","all","App","useState","fileNames","setFileNames","final","setFinal","formatar","string","forEach","item","vencimento","cliente","NF","valor","className","style","display","flexDirection","justifyContent","alignItems","width","onDrop","acceptedFiles","aux","file","includes","name","type","reader","FileReader","onabort","console","log","onerror","onload","getPdfText","result","then","nome","match","numero","regexExp","exec","nota","parseInt","replace","trim","push","e","readAsArrayBuffer","getRootProps","getInputProps","role","fileName","key","margin","disabled","onClick","element","document","createElement","Blob","href","URL","createObjectURL","download","date","d","Date","month","getMonth","day","getDate","year","getFullYear","formatDate","now","body","appendChild","click","GlobalWorkerOptions","workerSrc","version","Boolean","window","location","hostname","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"0aAYA,WAA0BA,GAA1B,iBAAAC,EAAA,sEACkBC,IAASC,YAAY,CAACH,SAAOI,QAD/C,cACMC,EADN,OAEMC,EAAYC,MAAMC,KAAK,CAACC,OAAQJ,EAAIK,UAAxB,uCAAmC,WAAOC,EAAEC,GAAT,SAAAX,EAAA,sEAC1BI,EAAIQ,QAAQD,EAAE,GADY,8BACRE,iBADQ,uCACUC,MAAMC,KAAI,SAAAC,GAAK,OAAIA,EAAMC,OAAKC,KAAK,KAD7C,2CAAnC,yDAFlB,SAKgBC,QAAQC,IAAIf,GAL5B,uCAKwCa,KAAK,KAL7C,4C,sBAwBe,SAASG,IAAO,IAAD,EACMC,mBAAS,IADf,mBACrBC,EADqB,KACVC,EADU,OAEFF,mBAAS,IAFP,mBAErBG,EAFqB,KAEdC,EAFc,KAqD5B,SAASC,IACP,IAAIC,EAAS,8BAIb,OAHAH,EAAMI,SAAQ,SAACC,GACbF,GAAUE,EAAKC,WAAa,IAAMD,EAAKE,QAAU,IAAMF,EAAKG,GAAK,IAAMH,EAAKI,MAAQ,QAE/EN,EAQT,OACE,yBAAKO,UAAU,MAAMC,MAAO,CAACC,QAAS,OAAQC,cAAe,SAAUC,eAAe,SAAUC,WAAY,WACxG,wBAAIJ,MAAO,CAACC,QAAS,OAAQE,eAAgB,SAAUC,WAAY,WAAnE,8BACA,yBAAKJ,MAAO,CAACC,QAAS,OAAQE,eAAgB,SAAUC,WAAY,SAAUC,MAAO,QACrF,kBAAC,IAAD,CAAUC,OAtDG,SAACC,GAClB,IAAIC,EAAM,GACVD,EAAcd,SAAQ,SAACgB,GACrB,IAAKtB,EAAUuB,SAASD,EAAKE,OAAuB,oBAAdF,EAAKG,KACzC,IACA,IAAMC,EAAS,IAAIC,WAEnBD,EAAOE,QAAU,kBAAMC,QAAQC,IAAI,6BACnCJ,EAAOK,QAAU,kBAAMF,QAAQC,IAAI,4BACnCJ,EAAOM,OAAS,Y,4CAGdC,CADkBP,EAAOQ,QACHC,MAAK,SAACD,GAC1B,IACA,IAAIE,EAAOF,EAAOG,MAAM,iCACxB,GAAID,EAAM,CACRA,EAAOA,EAAK,GAKd,IAHA,IAEIC,EAFAC,EAASJ,EAAOG,MAAM,qBAAkB,GACtCE,EAAW,oFAEXF,EAAQE,EAASC,KAAKN,IAAS,CACjC,IAAIO,EAAO,CAAC/B,GAAIgC,SAASJ,EAAOK,QAAQ,IAAK,KAAO,IAAMD,SAASL,EAAM,IAAK7B,WAAY6B,EAAM,GAAGO,OAAQjC,MAAO,IAAM0B,EAAM,GAAK,IAAK5B,QAAS2B,GACjJF,EAASA,EAAOS,QAAQN,EAAM,GAAI,IAClCnC,EAAM2C,KAAKJ,KAEd,MAAMK,GAAIjB,QAAQC,IAAIgB,QAG3BpB,EAAOqB,kBAAkBzB,GACzBD,EAAIwB,KAAKvB,EAAKE,MACd,MAAOsB,GAAIjB,QAAQC,IAAIgB,OAG3B7C,EAAa,GAAD,mBAAKD,GAAaqB,OAqBvB,gBAAG2B,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,cAAjB,OACC,wBAASD,EAAa,CAAEpC,UAAW,aACjC,0BAAWqC,KACX,0BAAMC,KAAK,OAAX,gBACA,8FACA,6BACA,8CACA,4BACGlD,EAAUR,KAAI,SAAA2D,GAAQ,OACrB,wBAAIC,IAAKD,GAAWA,aAQ9B,yBAAKtC,MAAO,CAACC,QAAQ,OAAQC,cAAe,MAAOE,WAAY,SAAUD,eAAgB,SAAUE,MAAO,SACxG,4BAAQL,MAAO,CAAEG,eAAgB,SAAUC,WAAY,SAASoC,OAAQ,IAAKC,SAA+B,IAArBtD,EAAUf,OAAesE,QArFhG,WACtB,IAAMC,EAAUC,SAASC,cAAc,KACjCpC,EAAO,IAAIqC,KAAK,CAACvD,KACX,CAACqB,KAAM,6BACnB+B,EAAQI,KAAOC,IAAIC,gBAAgBxC,GACnCkC,EAAQO,SAAW,UAzBvB,SAAoBC,GAClB,IAAIC,EAAI,IAAIC,KAAKF,GACbG,EAAQ,IAAMF,EAAEG,WAAa,GAC7BC,EAAM,GAAKJ,EAAEK,UACbC,EAAON,EAAEO,cAOb,OALIL,EAAMlF,OAAS,IACfkF,EAAQ,IAAMA,GACdE,EAAIpF,OAAS,IACboF,EAAM,IAAMA,GAET,CAACE,EAAMJ,EAAOE,GAAK1E,KAAK,KAcE8E,CAAWP,KAAKQ,OAAQ,OACvDjB,SAASkB,KAAKC,YAAYpB,GAC1BA,EAAQqB,UA8EF,gBACA,4BAAQhE,MAAO,CAACG,eAAgB,SAAUC,WAAY,SAASoC,OAAQ,IAAKC,SAA+B,IAArBtD,EAAUf,OAAcsE,QA7BtH,WACEpD,EAAS,IACTF,EAAa,MA2BP,0BApHVvB,IAASoG,oBAAoBC,UAA7B,kDAAoFrG,IAASsG,QAA7F,kBCEoBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAS/C,MACvB,2DCZNgD,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACzF,EAAD,OAEF2D,SAAS+B,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxD,MAAK,SAAAyD,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlE,QAAQkE,MAAMA,EAAMC,c","file":"static/js/main.9b72bb68.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"./index.css\"\n\nimport Dropzone from \"react-dropzone\";\nimport pdfjsLib from 'pdfjs-dist';\nimport PDFJSWorker from \"pdfjs-dist/build/pdf.worker.js\"; // add this to fit 2.3.0\n//convert.js\n\n\n\npdfjsLib.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.js`;\n\nasync function getPdfText(data) {\n  let doc = await pdfjsLib.getDocument({data}).promise;\n  let pageTexts = Array.from({length: doc.numPages}, async (v,i) => {\n      return (await (await doc.getPage(i+1)).getTextContent()).items.map(token => token.str).join('');\n  });\n  return (await Promise.all(pageTexts)).join('');\n}\n\nfunction formatDate(date) {\n  var d = new Date(date),\n      month = '' + (d.getMonth() + 1),\n      day = '' + d.getDate(),\n      year = d.getFullYear();\n\n  if (month.length < 2) \n      month = '0' + month;\n  if (day.length < 2) \n      day = '0' + day;\n\n  return [year, month, day].join('_');\n}\n\n\n\nexport default function App() {\n  const [fileNames, setFileNames] = useState([]);\n  const [final, setFinal] = useState([])\n\n  const downloadTxtFile = () => {\n    const element = document.createElement('a');\n    const file = new Blob([formatar()],    \n                {type: 'text/plain;charset=utf-8'});\n    element.href = URL.createObjectURL(file);\n    element.download = \"tabela_\" + formatDate(Date.now())+ \".csv\";\n    document.body.appendChild(element);\n    element.click();\n  }\n\n  \n\n  const handleDrop = (acceptedFiles) => {\n    let aux = []\n    acceptedFiles.forEach((file) => {\n      if (!fileNames.includes(file.name) && file.type === \"application/pdf\") {\n        try {\n        const reader = new FileReader()\n\n        reader.onabort = () => console.log('file reading was aborted')\n        reader.onerror = () => console.log('file reading has failed')\n        reader.onload = () => {\n        // Do whatever you want with the file contents\n          const binaryStr = reader.result\n          getPdfText(binaryStr).then((result) => {\n            try {\n            let nome = result.match(/RAZÃƒO SOCIAL([\\s\\S]*?)CNPJ/)\n            if (nome) {\n              nome = nome[1]\n            \n            let numero = result.match(/NÂº ([\\s\\S]*?)S/)[1]\n            const regexExp = /Num\\.([0-9]*?)Venc\\.([0-9]{2}\\/[0-9]{2}\\/[0-9]{4})ValorR\\$[\\s]*([0-9]*?,[0-9]{2})/\n            let match;\n            while(match = regexExp.exec(result)) {\n                let nota = {NF: parseInt(numero.replace('.', '')) + '/' + parseInt(match[1]), vencimento: match[2].trim(), valor: '\"' + match[3] + '\"', cliente: nome}\n                result = result.replace(match[0], '')\n                final.push(nota)\n            }\n          }} catch(e) {console.log(e)}\n            })\n        }\n        reader.readAsArrayBuffer(file)\n        aux.push(file.name)\n      } catch (e) {console.log(e)}\n      }\n    })\n    setFileNames([...fileNames,...aux]);\n  };\n\n  function formatar() {\n    let string = 'VENCTO,CLIENTE,NF,\"VALOR\"\\n'\n    final.forEach((item) => {\n      string += item.vencimento + ',' + item.cliente + ',' + item.NF + ',' + item.valor + '\\n'\n    })\n    return string\n  }\n\n  function limpar() {\n    setFinal([])\n    setFileNames([])\n  }\n\n  return (\n    <div className=\"App\" style={{display: 'flex', flexDirection: 'column', justifyContent:'center', alignItems: 'center'}}>\n        <h1 style={{display: 'flex', justifyContent: 'center', alignItems: 'center'}}>Converter notas para excel</h1>\n        <div style={{display: 'flex', justifyContent: 'center', alignItems: 'center', width: '80%'}}>\n        <Dropzone onDrop={handleDrop} >\n          {({ getRootProps, getInputProps }) => (\n            <div {...getRootProps({ className: \"dropzone\" })}>\n              <input {...getInputProps()} />\n              <span role=\"img\">ðŸ“‚</span>\n              <p>Arraste e solte os arquivos aqui ou clique para adicionÃ¡-los</p>\n              <div>\n              <strong>Arquivos: </strong>\n              <ul>\n                {fileNames.map(fileName => (\n                  <li key={fileName}>{fileName}</li>\n                ))}\n              </ul>\n            </div>\n            </div>\n          )}\n        </Dropzone>\n        </div>\n        <div style={{display:'flex', flexDirection: 'row', alignItems: 'center', justifyContent: 'center', width: '100%'}}>\n          <button style={{ justifyContent: 'center', alignItems: 'center',margin: 10}} disabled={fileNames.length === 0}  onClick={downloadTxtFile}>Gerar tabela</button>\n          <button style={{justifyContent: 'center', alignItems: 'center',margin: 10}} disabled={fileNames.length === 0} onClick={limpar}>Limpar seleÃ§Ã£o</button>\n        </div>\n\n    </div>\n  );\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}